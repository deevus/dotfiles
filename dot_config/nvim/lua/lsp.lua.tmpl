local nvim_lsp = require 'lspconfig'
local telescope = require 'telescope.builtin'
local lsp_zero = require 'lsp-zero'

lsp_zero.preset('recommended')

require('neodev').setup({})

require('mason').setup({})

require('mason-lspconfig').setup({
  handlers = {
    lsp_zero.default_setup,
  }
})

nvim_lsp['lspfuzzy'] = require 'lspfuzzy'

local on_attach = function(_, buffer)
  lsp_zero.default_keymaps({ buffer = buffer })

  vim.keymap.set('n', ';dc', function()
    vim.lsp.buf.declaration()
  end)

  vim.keymap.set('n', ';df', function()
    vim.lsp.buf.definition()
  end)

  vim.keymap.set('n', ';h', function()
    vim.lsp.buf.hover()
  end)

  vim.keymap.set('n', ';i', function()
    vim.lsp.buf.implementation()
  end)

  vim.keymap.set('n', ';s', function()
    vim.lsp.buf.signature_help()
  end)

  vim.keymap.set('n', ';td', function()
    vim.lsp.buf.type_definition()
  end)

  vim.keymap.set('n', ';rn', function()
    vim.lsp.buf.rename()
  end)

  vim.keymap.set('n', ';rf', function()
    vim.lsp.buf.references()
  end)

  vim.keymap.set('n', ';p', function()
    vim.lsp.buf.peek_definition()
  end)

  vim.keymap.set('n', ';f', function()
    vim.lsp.buf.formatting()
  end)

  vim.keymap.set('n', ';ca', function()
    vim.lsp.buf.code_action()
  end)

  vim.keymap.set('n', '<leader>.', function()
    vim.lsp.diagnostic.goto_next()
  end)

  vim.keymap.set('n', '<leader>,', function()
    vim.lsp.diagnostic.goto_prev()
  end)

  vim.keymap.set('n', '<leader>s', function()
    telescope.lsp_document_symbols()
  end)

  vim.api.nvim_exec([[
    "autocmd CursorHold * silent! lua vim.lsp.buf.hover()

    autocmd CursorHold * silent! lua vim.lsp.util.show_line_diagnostics()
    autocmd CursorHold  * silent! lua vim.lsp.buf.document_highlight()
    autocmd CursorHoldI * silent! lua vim.lsp.buf.document_highlight()
    autocmd CursorMoved * silent! lua vim.lsp.buf.clear_references()
    autocmd CursorHold,CursorHoldI * lua require'nvim-lightbulb'.update_lightbulb()

    " Use <Tab> and <S-Tab> to navigate through popup menu
    inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
    inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

    " Set completeopt to have a better completion experience
    set completeopt=menuone,noinsert,noselect

    " Avoid showing message extra message when using completion
    set shortmess+=c
  ]], false)
end

local servers = {
  'tsserver',
  'lua_ls',
  'vimls',
  'cssls',
  'lspfuzzy',
  'pylsp',
  'intelephense',
  'jsonls',
  'sourcekit',
  'zls',
  'gdscript',
  'dartls',
  'rust_analyzer',
  'jdtls',
}

local server_opts = {
  intelephense = {
    init_options = {
      licenceKey = "{{ pass "Software/Intelephense" }}",
      storagePath = os.getenv("HOME") .. "/.cache/intelephense",
    },

    settings = {
      intelephense = {
        files = {
          maxSize = 5000000,
        },
        diagnostics = {
          undefinedTypes = false,
        },
      },
    },
  },

  jsonls = {
    cmd = { 'vscode-json-languageserver', '--stdio' },
  },

  sourcekit = {
    cmd = { 'sourcekit-lsp' },
  },

  lua_ls = lsp_zero.nvim_lua_ls(),

  cssls = {
    cmd = { 'css-languageserver', '--stdio' },
  },

  eslint = {
    cmd = { 'eslint-lsp', '--stdio' },
    filetypes = nvim_lsp['tsserver'].filetypes,
  },

  gdscript = {
    flags = { debounce_text_changes = 150 },
  },

  glslls = {
    cmd = { 'glslls', '--stdin' },
    filetypes = { 'glsl' },
  },
}

local capabilities = require('cmp_nvim_lsp').default_capabilities()

for _, lsp in ipairs(servers) do
  local opts = server_opts[lsp] or {}

  local default_opts = {
    capabilities = capabilities,

    flags = {
      debounce_text_changes = 150,
    },
  }

  for k, v in pairs(default_opts) do opts[k] = v end

  nvim_lsp[lsp].setup(opts)
end

lsp_zero.on_attach(on_attach)

local luasnip = require 'luasnip'
local cmp = require 'cmp'
local cmp_format = lsp_zero.cmp_format()

cmp.setup({
  sources = {
    { name = 'nvim_lsp' },
    { name = 'cmp_tabnine' },
    { name = 'buffer' },
    { name = 'luasnip' },
    { name = 'crates' },
  },

  mapping = {
    ['<CR>'] = cmp.mapping.confirm({ select = true }),
    ['<Tab>'] = function(fallback)
      if cmp.visible() then
        cmp.select_next_item()
      elseif luasnip.expand_or_jumpable() then
        vim.fn.feedkeys(vim.api.nvim_replace_termcodes('<Plug>luasnip-expand-or-jump', true, true, true), '')
      else
        fallback()
      end
    end,
    ['<S-Tab>'] = function(fallback)
      if cmp.visible() then
        cmp.select_prev_item()
      elseif luasnip.jumpable(-1) then
        vim.fn.feedkeys(vim.api.nvim_replace_termcodes('<Plug>luasnip-jump-prev', true, true, true), '')
      else
        fallback()
      end
    end,
  },

  snippet = {
    expand = function(args)
      require('luasnip').lsp_expand(args.body)
    end
  },

  formatting = cmp_format,
})
